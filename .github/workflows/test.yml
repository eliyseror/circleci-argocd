name: Handle Repository Dispatch

on:
  repository_dispatch:
    types: [test]

jobs:
  update-image:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Display Payload
        run: |
          echo "Namespace: ${{ github.event.client_payload.namespace }}"
          echo "Tag: ${{ github.event.client_payload.tag }}"
      - name: Install yq
        run: |
          sudo snap install yq  # Install yq if not already installed

      - name: Update Kubernetes Deployment
        run: |
          TAG="${{ github.event.client_payload.tag }}"  # Extract the tag from the payload
          NEW_IMAGE="${TAG}"  # Construct the new image name
          echo "Updating image to: $NEW_IMAGE"

          # Update the image in the deployment.yaml
          yq eval -i '.spec.template.spec.containers[0].image = "'$NEW_IMAGE'"' test/deployment.yaml
          echo "Updated image name in deployment.yaml to: $NEW_IMAGE"

      - name: Commit changes
        run: |
          git config --local user.name "GitHub Action"
          git config --local user.email "eliyseror@gmail.com"
      
          # Stage changes
          git add test/deployment.yaml
      
          # Check for changes and commit if any
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update deployment image to ${NEW_IMAGE}"
            git push origin main  # Change 'main' to your default branch if necessary
          fi

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1
      - name: Install Argo CD CLI
        run: |
          # Download the latest release
          VERSION=$(curl -s https://api.github.com/repos/argoproj/argo-cd/releases/latest | jq -r '.tag_name')
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/download/${VERSION}/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/
          argocd version --client

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name eli-eks --region eu-north-1

      - name: Fetch Argo CD server address
        id: fetch_argocd_server
        run: |
          echo "ARGOCD_SERVER=$(kubectl get service argocd-server -n argocd --output=jsonpath='{.status.loadBalancer.ingress[0].hostname}')" >> $GITHUB_ENV

      - name: Create Docker registry secret
        run: |
          DOCKER_SERVER="registry.gitlab.com"
          DOCKER_USERNAME="${{ secrets.DOCKERHUB_USERNAME }}"
          DOCKER_PASSWORD="${{ secrets.DOCKERHUB_TOKEN }}"
          DOCKER_EMAIL="${{ secrets.DOCKERHUB_EMAIL }}"
          DEST_NAMESPACE="${{ github.event.client_payload.namespace }}"  # Use the namespace from the payload
          SECRET_NAME="gitlab-registry-secret"

          kubectl create secret docker-registry $SECRET_NAME \
            --docker-server=$DOCKER_SERVER \
            --docker-username=$DOCKER_USERNAME \
            --docker-password=$DOCKER_PASSWORD \
            --docker-email=$DOCKER_EMAIL \
            --namespace=$DEST_NAMESPACE || echo "Secret $SECRET_NAME already exists in namespace $DEST_NAMESPACE"

      - name: Set up Argo CD credentials
        run: |
          ARGOCD_USERNAME="admin"  # Replace with your username if different
          ARGOCD_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
      
          # Export both username and password to GitHub Actions environment
          echo "ARGOCD_USERNAME=${ARGOCD_USERNAME}" >> $GITHUB_ENV
          echo "ARGOCD_PASSWORD=${ARGOCD_PASSWORD}" >> $GITHUB_ENV

      - name: Login to Argo CD
        run: |
          echo "Argo CD Username: $ARGOCD_USERNAME"
          echo "Argo CD Password: $ARGOCD_PASSWORD"
          echo "Argo CD server: $ARGOCD_SERVER"

          argocd login "$ARGOCD_SERVER" --username "$ARGOCD_USERNAME" --password "$ARGOCD_PASSWORD" --insecure
      - name: Add GitHub repository to Argo CD
        run: |
          argocd repo add "https://github.com/eliyseror/circleci-argocd.git" \
            --username "${{ secrets.MY_GITHUB_USERNAME }}" \
            --password "${{ secrets.MY_GITHUB_TOKEN }}" \
            --insecure-skip-server-verification

      - name: Create Argo CD application
        run: |
          APP_NAME="${{ github.event.client_payload.namespace }}-app"  
          REPO_URL="https://github.com/eliyseror/circleci-argocd.git"
          REPO_PATH="test"
          DEST_NAMESPACE="${{ github.event.client_payload.namespace }}"
          DEST_SERVER="https://kubernetes.default.svc"

          argocd app create "$APP_NAME" \
            --repo "$REPO_URL" \
            --path "$REPO_PATH" \
            --dest-server "$DEST_SERVER" \
            --dest-namespace "$DEST_NAMESPACE" \
            --sync-policy manual \
            --revision main 

      - name: Sync the application
        run: |
          argocd app sync "$APP_NAME"

      - name: Logout from Argo CD (optional)
        run: |
          argocd logout "$ARGOCD_SERVER"

      - name: Final message
        run: echo "Application $APP_NAME created and synced in namespace $DEST_NAMESPACE!"
